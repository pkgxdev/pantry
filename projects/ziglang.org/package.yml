distributable:
  url: https://github.com/ziglang/zig/archive/refs/tags/{{version}}.tar.gz
  strip-components: 1

versions:
  github: ziglang/zig/tags

warnings:
  - vendored

#FIXME proper system for re-using pre-built binaries
# we must require the vendor to provide signatures against a published public
# key. If they donâ€™t then really we should build ourselves or warn the user
# about the fact.
# The thing is, we trust the sources implicitly currently because signing is
# so rare. The only way wide spread signing will occur is via our protocol.

build:
  dependencies:
    curl.se: '*'
    gnu.org/tar: '*'
    tukaani.org/xz: '*'
  script:
    - run: |
        case "{{hw.platform}}+{{hw.arch}}" in
          darwin+aarch64) PLATFORM="macos-aarch64" ;;
          darwin+x86-64)  PLATFORM="macos-x86_64"  ;;
          linux+aarch64)  PLATFORM="linux-aarch64" ;;
          linux+x86-64)   PLATFORM="linux-x86_64"  ;;
        esac
      if: <0.14.1
    # why? why reverse the order of the platforms?
    - run: |
        case "{{hw.platform}}+{{hw.arch}}" in
          darwin+aarch64) PLATFORM="aarch64-macos" ;;
          darwin+x86-64)  PLATFORM="x86_64-macos"  ;;
          linux+aarch64)  PLATFORM="aarch64-linux" ;;
          linux+x86-64)   PLATFORM="x86_64-linux"  ;;
        esac
      if: '>=0.14.1'

    - curl -Lfo zig.tar.xz "https://ziglang.org/download/{{ version }}/zig-${PLATFORM}-{{ version }}.tar.xz"
    - tar Jxf zig.tar.xz

    - install -Dm755 zig-${PLATFORM}-{{ version }}/zig "{{ prefix }}/bin/zig"
    - cp -a zig-${PLATFORM}-{{ version }}/lib "{{ prefix }}"

test:
  - run: zig build-exe $FIXTURE --name hello
    if: <0.15
    fixture:
      extname: zig
      content: |
        const std = @import("std");
        pub fn main() !void {
            const stdout = std.io.getStdOut().writer();
            try stdout.print("Hello, world!", .{});
        }
  - run: zig build-exe $FIXTURE --name hello
    if: '>=0.15'
    fixture:
      extname: zig
      content: |
        const std = @import("std");
        pub fn main() !void {
            std.log.info("Hello, world!", .{});
        }
  - ./hello

provides:
  - bin/zig
