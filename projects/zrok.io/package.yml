# this is a basic template for packages we strongly recommend looking at the
# contents of both:
#
# * https://github.com/pkgxdev/pantry
#
# as a learning guide and reference. For example, if you are package a `go`
# project, then browse the listings and find a go package.


# this is the source tarball. Swap the version out for {{version}} or we won’t
# be able to upgrade the package when it updates!
distributable:
  url: https://github.com/openziti/zrok/archive/refs/tags/v{{version}}.tar.gz
  # this obscure option dictates how many components are removed from the
  # extracted tarball. It only works with tarballs. You almost always want
  # `1`. If after extraction the src-directory is funky try `0` or `2`.
  strip-components: 1

# if omitted, most tools will work by looking at either the provides: list, or require the
# fully-qualified name of the package. providing a display-name looks better in `pkgxdev/ossapp`
# and allows simpler commands like `pkgx install common-package-name`. this _should never_ conflict
# with any other display-name, or we will become upset and probably yell and stuff.
display-name: zrok

# if there’s a github then we can parse the versions
versions:
  # if the repo has a github then we can parse versions
  # this should be one of these (remove the rest or the YAML won’t parse)
  github: openziti/zrok  # reads github tags but only tags of releases (this is usually what you want)

# this is an key/list of platforms that the package supports
# usually omitted, which will default to all platforms
platforms:
  - darwin
  - linux/x86-64
  - linux/aarch64

dependencies:
  # to figure out dependencies you can read the project’s README
  # however it is often easier to read the [brew formula](https://formulae.brew.sh/formula/)
  #
  # see dist.pkgx.dev for the packages pkgx provides
  # if you need a package that isn’t there, you may need to build it!
  #
  # see semver.org for version specifications

build:
  dependencies:
    go.dev: 1.21.4
    nodejs.org: 21.2.0
    npmjs.com: 10.2.3
    # ^^ use fully qualified names
  script: |
    cd ui/
    npm install
    npm run build
    cd ../
    mkdir -p "{{prefix}}/bin"
    go build -o "{{prefix}}/bin" ./...
  # ^^ it’s extremely common for packages to require the above

provides:
  - bin/zrok
  - bin/copyto
  - bin/pastefrom
  # ^^ specify the binaries or pkgx shell integration won’t work

test:
  dependencies:
  script:
    zrok version
    # if it’s a tool check the version matches
    # you should run the tool to check it works!
    # if it's a library then you should *use* the library
    # don’t forget to check other package.ymls in the pantry for examples!
