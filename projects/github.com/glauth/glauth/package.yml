distributable:
  url: git+https://github.com/glauth/glauth
  ref: '{{version.tag}}'

display-name: glauth

versions:
  github: glauth/glauth

build:
  dependencies:
    git-scm.org: '*'
    go.dev: ^1.23
    gnu.org/gcc: '*'
    gnu.org/coreutils: '*'
    stedolan.github.io/jq: ^1.7
    linux:
      linux-pam.org: 1.5.3
  env:
    GLAUTH_SETUP_SCRIPT: setup.bash
    GLAUTH_README_FILE: README.md
    GLAUTH_CONFIG_FILE: glauth.toml
    GLAUTH_SERVICE_ENVIRONMENT_FILE: glauth.env
    GLAUTH_SERVICE_SYSTEMD_FILE: glauth.service
    CGO_ENABLED: 1
    linux:
      LIB_SUFFIX: so
      GO_LDFLAGS_BINARY:
        - -buildmode=pie
    darwin:
      LIB_SUFFIX: dylib
    GO_LDFLAGS_PLUGIN:
      - -w
      - -s
    #      - -buildmode=plugin
    GO_LDFLAGS_BINARY:
      - -s
      - -w
  #      - -X github.com/glauth/glauth/v2/internal/version/version.Version={{version.tag}}
  script:
    - working-directory: v2
      run:
        #
        # to do a release
        #
        - sed -i 's/^const Version.*/const Version = "{{version.tag}}"/' internal/version/const.go
        #      - cat internal/version/const.go
        #      - exit 1
        - go build -v -ldflags="${GO_LDFLAGS_BINARY}" -trimpath -buildvcs=false -o "{{ prefix }}"/bin/glauth

    #
    # get the plugins repositories
    #
    - run:
        - sed -i 's|git@github.com:|https://github.com/|g' .gitmodules
        - git submodule update --init --recursive

    #
    # pkg/plugins/glauth-pam/pam_linux.go:148:9: cannot use h.ldohelper.Bind(h, bindDN, bindSimplePw, conn) (value of type "github.com/glauth/ldap".LDAPResultCode) as "github.com/nmcclain/ldap".LDAPResultCode value in return statement
    # pkg/plugins/glauth-pam/pam_linux.go:148:51: not enough arguments in call to h.ldohelper.Bind
    #    have (pamHandler, string, string, net.Conn)
    #    want (context.Context, handler.LDAPOpsHandler, string, string, net.Conn)
    # pkg/plugins/glauth-pam/pam_linux.go:152:9: cannot use h.ldohelper.Search(h, bindDN, searchReq, conn) (value of type "github.com/glauth/ldap".ServerSearchResult) as "github.com/nmcclain/ldap".ServerSearchResult value in return statement
    # pkg/plugins/glauth-pam/pam_linux.go:152:50: not enough arguments in call to h.ldohelper.Search
    #    have (pamHandler, string, "github.com/nmcclain/ldap".SearchRequest, net.Conn)
    #    want (context.Context, handler.LDAPOpsHandler, string, "github.com/glauth/ldap".SearchRequest, net.Conn)
    # pkg/plugins/glauth-pam/pam_linux.go:377:24: too many arguments in call to options.Logger.Error
    #    have (error, string)
    #    want ()
    # pkg/plugins/glauth-pam/pam_linux.go:379:18: options.Logger.V undefined (type *zerolog.Logger has no field or method V)
    # pkg/plugins/glauth-pam/pam_linux.go:382:9: cannot use pamHandler{â€¦} (value of type pamHandler) as handler.Handler value in return statement: pamHandler does not implement handler.Handler (wrong type for method Add)
    #           have Add(string, "github.com/nmcclain/ldap".AddRequest, net.Conn) ("github.com/nmcclain/ldap".LDAPResultCode, error)
    #           want Add(string, "github.com/glauth/ldap".AddRequest, net.Conn) ("github.com/glauth/ldap".LDAPResultCode, error)
    # pkg/plugins/glauth-pam/pam_linux.go:384:17: cannot use options.Logger (variable of type *zerolog.Logger) as logr.Logger value in struct literal
    #
    #    - if: linux
    #      working-directory: v2/pkg/plugins
    #      run: export PLUGINS=$(ls -d glauth-*)
    #    - if: darwin
    #      working-directory: v2/pkg/plugins
    #
    # list plugins excluding pam that does not compile
    #
    - working-directory: v2/pkg/plugins
      run: export PLUGINS=$(ls -d glauth-*|grep -v "pam$")
    - working-directory: v2
      run:
        - for plugin in ${PLUGINS}; do

        - go mod edit -json pkg/plugins/${plugin}/go.mod |
          #
          # install plugins go dependencies
          #
        - jq --raw-output '.Require|.[]|select(.Indirect!=true and ((.Path|contains("glauth"))|not))| "\(.Path)@\(.Version)"' |
          xargs -I{} go get '{}'

          #
          # get the source file name (in old glauth versions, pam does not follow the file namming of the other plugins)
          #
        - SRC_FILE="$(cd pkg/plugins/${plugin}/ && ls -1 *.go | grep ${plugin/glauth-/})"

        - go build -v -ldflags="-s -w" -buildmode=plugin -trimpath
          -o "{{ prefix }}"/lib/${plugin}.${LIB_SUFFIX}
          ./pkg/plugins/${plugin}/${SRC_FILE}

        - done
    - working-directory: props
      run:
        - install -Dm755 ${GLAUTH_SETUP_SCRIPT} {{prefix}}/bin/glauth-setup
        - install -D ${GLAUTH_README_FILE} {{prefix}}/doc/${GLAUTH_README_FILE}
        - install -D ${GLAUTH_CONFIG_FILE} {{prefix}}/etc/glauth/${GLAUTH_CONFIG_FILE}
        - install -D ${GLAUTH_SERVICE_ENVIRONMENT_FILE} {{prefix}}/etc/glauth/${GLAUTH_SERVICE_ENVIRONMENT_FILE}
        - install -D ${GLAUTH_SERVICE_SYSTEMD_FILE} {{prefix}}/etc/systemd/system/${GLAUTH_SERVICE_SYSTEMD_FILE}

provides:
  - bin/glauth
  - bin/glauth-setup

test: test "$(glauth --version|grep GLauth|cut -d' ' -f2)" = v{{ version }}
