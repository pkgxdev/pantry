distributable:
  url: https://nodejs.org/dist/v{{ version }}/node-v{{ version }}.tar.xz
  strip-components: 1

versions:
  github: nodejs/node/tags

companions:
  npmjs.com: '*'

dependencies:
  # prior builds of nodejs used our icu4c
  unicode.org: ^71
  openssl.org: 1.1
  zlib.net: 1
  linux:
    gnu.org/gcc/libstdcxx: '*' # libstdc++, since 22.2.0

provides:
  - bin/node

interprets:
  extensions: js
  args: node

build:
  dependencies:
    python.org: ~3.9
    linux:
      gnu.org/gcc: '*'
  script:
    # the nodejs build doesn't like mixing -shared and -pie
    - run:
        - cp $PROP g++-wrapper
        - chmod +x g++-wrapper
      prop: |
        #!/bin/bash
        # Capture all arguments into an array
        ARGS=("$@")

        # Check if the '-shared' flag is present in the arguments
        if printf "%s\n" "${ARGS[@]}" | grep -q -e '-shared'; then

          # Use a loop to filter out the '-pie' flag from the arguments
          FILTERED_ARGS=()
          for arg in "${ARGS[@]}"; do
            if [ "$arg" != "-pie" ]; then
              FILTERED_ARGS+=("$arg")
            fi
          done

          # Pass the filtered arguments to g++
          exec g++ "${FILTERED_ARGS[@]}"
        else
          # Pass the original arguments to g++
          exec g++ "${ARGS[@]}"
        fi
      working-directory: $HOME/.local/bin
      if: linux
    - run: python configure.py $ARGS
      if: <14
    - run: ./configure $ARGS
      if: '>=14'
    # v22 didn't include iomanip for std::precision in one file
    - run: |
        sed -i '/wasm-disassembler.h/a\
        \
        #include <iomanip>' wasm-disassembler.cc
      working-directory: deps/v8/src/wasm
      if: ^22
    # -pie breaks module build in v23.5.0
    - run: export LDFLAGS="$(echo $LDFLAGS | sed 's/-pie//')"
      if: ^23.5.0

    - make --jobs {{ hw.concurrency }} install
  env:
    ARGS:
      - --without-npm
      - --prefix={{ prefix }}
      - --shared-openssl
      - --shared-zlib
    linux/x86-64:
      CFLAGS: -fPIC
      CXXFLAGS: -fPIC
    linux:
      PATH: $HOME/.local/bin:$PATH
      CC: gcc
      CXX: g++-wrapper
      LD: g++-wrapper

test:
  script: |
    out=$(node $FIXTURE)
    test "$out" = "Hello, world!"
  fixture: console.log("Hello, world!");
