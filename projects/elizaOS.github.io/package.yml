distributable:
  url: https://github.com/elizaOS/eliza/archive/refs/tags/{{version.tag}}.tar.gz
  strip-components: 1

display-name: elizaOS

platforms:
  - darwin
  - linux/x86-64 # linux/aarch64 node-gyp build isn't playing nice

versions:
  github: elizaOS/eliza
  transform: v => v.replaceAll(/\+build.?/g, '.')

provides:
  - bin/eliza

dependencies:
  python.org: '>=2.7'
  nodejs.org: ~23.3
  pnpm.io: '*'
  linux:
    pixman.org: '*' # canvas needs libpixman-1
    gnu.org/gcc/libstdcxx: 14 # node-llama-cpp needs GLIBX_2.29

companions:
  git-scm.org: 2
  ffmpeg.org: '*'

build:
  dependencies:
    python.org: ~3.10 # node-gyp doesn't like later pythons
    pnpm.io: 9.12.3
    curl.se: '*'
    gnu.org/patch: '*'
    linux:
      gnu.org/gcc: 14
  script:
    - run: curl 'https://github.com/adimverse/eliza/commit/d577fda887820e188b0e017f9869185be9fb3bc7.patch' | patch -p1
      if: ^0.1.8
    # -shared and -pie don't mix
    - run:
        - install -Dm755 $PROP gcc-wrapper
        - sed 's/gcc/g++/g' gcc-wrapper > g++-wrapper
        - chmod +x gcc-wrapper g++-wrapper
        - gcc-wrapper -v
        - g++-wrapper -v
      prop: |
        #!/bin/bash
        # Capture all arguments into an array
        ARGS=("$@")

        # Check if the '-shared' flag is present in the arguments
        if printf "%s\n" "${ARGS[@]}" | grep -q -e '-shared'; then

          # Use a loop to filter out the '-pie' flag from the arguments
          FILTERED_ARGS=()
          for arg in "${ARGS[@]}"; do
            if [ "$arg" != "-pie" ] && [ "$arg" != "-Wl,-pie" ]; then
              FILTERED_ARGS+=("$arg")
            fi
          done

          # Pass the filtered arguments to gcc
          exec gcc "${FILTERED_ARGS[@]}"
        else
          # Pass the original arguments to gcc
          exec gcc "${ARGS[@]}"
        fi
      working-directory: $HOME/.local/bin
      if: linux
    - pnpm install --no-frozen-lockfile
    - pnpm run build
    # adapted from their Dockerfile
    - run:
        - cp $SRCROOT/package.json .
        - cp $SRCROOT/pnpm-workspace.yaml .
        - cp $SRCROOT/eslint.config.mjs .
        - cp $SRCROOT/.eslintrc.json .
        - cp $SRCROOT/.npmrc .
        - cp $SRCROOT/turbo.json .
        - cp -R $SRCROOT/node_modules .
        - cp -R $SRCROOT/agent .
        - cp -R $SRCROOT/client .
        - cp $SRCROOT/lerna.json .
        - cp -R $SRCROOT/packages .
        - cp -R $SRCROOT/scripts .
        - cp -R $SRCROOT/characters .
        - cp $SRCROOT/.env.example .
      working-directory: ${{prefix}}/libexec
    - run: install -Dm755 $PROP eliza
      working-directory: ${{prefix}}/bin
      prop: |
        #!/bin/sh

        # add --help and --version flags
        if [ "$1" = "--help" ]; then
          echo "This is a simple wrapper to start the elizaOS server and client."
          exit 0
        elif [ "$1" = "--version" ]; then
          echo "elizaOS {{version}}"
          exit 0
        fi

        # change to the libexec directory
        cd "$(dirname "$(readlink -f "$0")")/../libexec" || exit 1

        # start the server
        pnpm start &
        SERVER_PID=$!

        # cleanup trap to kill the server
        cleanup() {
          echo "Shutting down serverâ€¦"
          kill $SERVER_PID 2>/dev/null
          wait $SERVER_PID 2>/dev/null
        }

        trap cleanup EXIT INT TERM

        # start the client
        pnpm start:client
  env:
    linux:
      PATH: $HOME/.local/bin:$PATH
      CC: gcc-wrapper
      CXX: g++-wrapper
      LD: g++-wrapper

test:
  # we could start the server and client, test the api, but that's a lot of work
  # and it's going to iterate rapidly
  - eliza --help
  - test "$(eliza --version)" = "elizaOS {{version}}"
