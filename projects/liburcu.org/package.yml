distributable:
  url: https://lttng.org/files/urcu/userspace-rcu-{{version}}.tar.bz2
  strip-components: 1

display-name: liburcu

versions:
  github: urcu/userspace-rcu/tags
build:
  dependencies:
    #llvm.org: '*'
    gnu.org/gcc: '*'
    gnu.org/autoconf: '*'
    gnu.org/make: '*'

  env:
    ARGS:
      - --prefix="{{prefix}}"

  script:
    - ./configure $ARGS
    - make --jobs {{ hw.concurrency }} install

test:
  dependencies:
    freedesktop.org/pkg-config: '*'
  fixture: |
    // SPDX-FileCopyrightText: 2013 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    //
    // SPDX-License-Identifier: MIT
    
    /*
     * This example shows how to add into a linked-list safely against
     * concurrent RCU traversals.
     */
    
    #include <stdio.h>
    
    #include <urcu/urcu-memb.h>	/* Userspace RCU flavor */
    #include <urcu/rculist.h>	/* RCU list */
    #include <urcu/compiler.h>	/* For CAA_ARRAY_SIZE */
    
    /*
     * Nodes populated into the list.
     */
    struct mynode {
       int value;                 /* Node content */
       struct cds_list_head node; /* Linked-list chaining */
    };
    
    int main(void)
    {
       int values[] = { -5, 42, 36, 24, };
       CDS_LIST_HEAD(mylist);		/* Defines an empty list head */
       unsigned int i;
       int ret = 0;
       struct mynode *node;
    
       /*
        * Adding nodes to the linked-list. Safe against concurrent
        * RCU traversals, require mutual exclusion with list updates.
        */
       for (i = 0; i < CAA_ARRAY_SIZE(values); i++) {
          node = malloc(sizeof(*node));
          if (!node) {
             ret = -1;
             goto end;
          }
          node->value = values[i];
          cds_list_add_rcu(&node->node, &mylist);
       }
    
       /*
        * Just show the list content. This is _not_ an RCU-safe
        * iteration on the list.
        */
       printf("mylist content:");
       cds_list_for_each_entry(node, &mylist, node) {
          printf(" %d", node->value);
       }
       printf("\n");
    end:
       return ret;
    }
    
  script: |
    mv ${FIXTURE} ${FIXTURE}.c
    cc ${FIXTURE}.c -lurcu
    ./a.out
