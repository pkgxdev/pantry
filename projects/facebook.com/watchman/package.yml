distributable:
  url: https://github.com/facebook/watchman/archive/refs/tags/{{version.tag}}.tar.gz
  strip-components: 1

versions:
  github: facebook/watchman

dependencies:
  boost.org: ^1.84
  # these need version locking, but we don't support that yet
  # facebook.com/edencommon: '{{version}}'
  # facebook.com/fb303: '{{version}}'
  # facebook.com/folly: '{{version}}'
  facebook.com/edencommon: '*'
  facebook.com/fb303: '*'
  facebook.com/folly: '*'
  fmt.dev: '>=9'
  gflags.github.io: ^2
  google.com/glog: ^0.6
  libevent.org: ^2.1
  libsodium.org: ^1
  openssl.org: ^1.1
  pcre.org/v2: ^10
  python.org: ~3.11
  linux:
    libcxx.llvm.org: 18 # libunwind
    gnu.org/gcc/libstdcxx: 13

build:
  dependencies:
    cmake.org: '*'
    github.com/skystrife/cpptoml: '*'
    # these need version locking, but we don't support that yet
    # facebook.com/fbthrift: '{{version}}'
    # facebook.com/mvfst: '{{version}}'
    facebook.com/fbthrift: '*'
    facebook.com/mvfst: '*'
    google.com/googletest: '*'
    rust-lang.org: '*'
    linux:
      gnu.org/gcc: 13
  script:
    # the pywatchman build doesn't like mixing -shared and -pie
    - run:
        - cp $PROP gcc-wrapper
        - chmod +x gcc-wrapper
      prop: |
        #!/bin/bash
        # Capture all arguments into an array
        ARGS=("$@")

        # Check if the '-shared' flag is present in the arguments
        if printf "%s\n" "${ARGS[@]}" | grep -q -e '-shared'; then

          # Use a loop to filter out the '-pie' flag from the arguments
          FILTERED_ARGS=()
          for arg in "${ARGS[@]}"; do
            if [ "$arg" != "-pie" ]; then
              FILTERED_ARGS+=("$arg")
            fi
          done

          # Pass the filtered arguments to gcc
          exec gcc "${FILTERED_ARGS[@]}"
        else
          # Pass the original arguments to gcc
          exec gcc "${ARGS[@]}"
        fi
      working-directory: $HOME/.local/bin
      if: linux

    # version/path mismatch
    - run: |
        if test -f Cargo.toml; then
          sed -i 's/watchman_client = { version = ".*", path/watchman_client = { path/' Cargo.toml
        fi
      working-directory: watchman/cli
    - cmake -S . -B build $CMAKE_ARGS -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS"
    - cmake --build build
    - cmake --install build
    - mkdir -p {{prefix}}/var/run/watchman
  env:
    CMAKE_ARGS:
      - -DCMAKE_INSTALL_PREFIX="{{prefix}}
      - -DCMAKE_INSTALL_LIBDIR=lib
      - -DBUILD_SHARED_LIBS=OFF
      - -DCMAKE_BUILD_TYPE=Release
      - -DCMAKE_FIND_FRAMEWORK=LAST
      - -DCMAKE_VERBOSE_MAKEFILE=ON
      - -Wno-dev
      - -DBUILD_TESTING=OFF
      - -DENABLE_EDEN_SUPPORT=ON
      - -DWATCHMAN_VERSION_OVERRIDE={{version}}
      - -DPython3_EXECUTABLE={{deps.python.org.prefix}}/bin/python
      - -DUSE_SYS_PYTHON=OFF
      - -DWATCHMAN_STATE_DIR=
    linux:
      PATH: $HOME/.local/bin:$PATH
      CC: gcc-wrapper
      CXX: g++
      LD: g++
      # intentionally omit -pie so python lib builds
      LDFLAGS: -Wl,-lpython{{deps.python.org.version.marketing}},-lstdc++
      CMAKE_ARGS:
        - -DCMAKE_EXE_LINKER_FLAGS=-Wl,-pie,-lstdc++
    darwin:
      CMAKE_ARGS:
        - -DCMAKE_EXE_LINKER_FLAGS=-Wl,-dead_strip_dylibs

provides:
  - bin/watchman
  - bin/watchman-diag
  - bin/watchman-make
  - bin/watchman-wait
  - bin/watchman-replicate-subscription
  - bin/watchmanctl

test:
  script:
    - watchman -v | grep {{version}}
    - watchman watch $ARGS .
    - kill $(cat pid)
    - cat state | grep {{version}}
  env:
    ARGS:
      - --sockname=$PWD/sock
      - --statefile=$PWD/state
      - --logfile=$PWD/log
      - --pidfile=$PWD/pid
